{"version":3,"file":"static/js/387.35403b84.chunk.js","mappings":"6QAOaA,GALYC,EAAAA,GAAAA,IAAH,yFAKEA,EAAAA,GAAAA,GAAH,+GAMRC,EAAYD,EAAAA,GAAAA,GAAH,2LASTE,EAAWF,EAAAA,GAAAA,IAAH,kFAMRG,EAAiBH,EAAAA,GAAAA,IAAH,0CAIdI,EAAYJ,EAAAA,GAAAA,EAAH,4CAITK,EAAYL,EAAAA,GAAAA,KAAH,6C,kBC2BtB,EAlDa,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WAMR,OALAC,EAAAA,EAAAA,IAAU,GAAD,OAAIN,IAAWO,MAAK,SAAAC,GAC3BJ,GAAU,OAAII,GAEf,IAEM,WACLJ,EAAU,GACX,CACF,GAAE,CAACJ,KAGF,iCACE,SAAC,EAAAS,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,MAEDP,EAAOQ,OAAS,GACf,SAAClB,EAAD,UACGU,EACES,QAAO,qBAAGC,SAAH,IACPC,KAAI,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,QAASH,EAA3B,EAA2BA,UAAWI,EAAtC,EAAsCA,aAAtC,OACH,UAACtB,EAAD,WACGsB,GACC,SAACrB,EAAD,CACEsB,IAAG,UAAKC,EAAAA,IAAL,OAAcF,GACjBG,IAAKL,KAGP,SAACnB,EAAD,CAAUsB,IAAKG,EAAaD,IAAKL,KAEnC,SAAClB,EAAD,WACE,UAACC,EAAD,WACGiB,EADH,OAEE,UAAChB,EAAD,eAAac,YAZHG,EADb,OAoBT,mEAIP,C,wJC1DM,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BtB,GAA5B,yFACkBuB,EAAAA,EAAAA,IAAA,6CACiBvB,EADjB,oBACoCwB,EAAAA,KAFtD,uBACGC,EADH,EACGA,KADH,kBAKEA,GALF,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+B1B,GAA/B,yFAGKuB,EAAAA,EAAAA,IAAA,6CAC8BvB,EAD9B,4BACyDwB,EAAAA,GADzD,2BAHL,uBAEKG,EAFL,EAEHF,KAAQE,QAFL,kBAOEA,GAPF,kEAUA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBN,GAAzB,yFAGKuB,EAAAA,EAAAA,IAAA,6CAC8BvB,EAD9B,4BACyDwB,EAAAA,KAJ9D,uBAEKhB,EAFL,EAEHiB,KAAQjB,KAFL,kBAOEA,GAPF,kE,uKCpBMgB,EAAM,mCACNL,EAAS,mCACf,SAAeS,IAAtB,4CAAO,OAAP,oBAAO,sGAGKL,EAAAA,EAAAA,IAAA,kEACmDC,IAJxD,uBAEKG,EAFL,EAEHF,KAAQE,QAFL,kBAOEA,GAPF,kEAUA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,yFAGKP,EAAAA,EAAAA,IAAA,4DAC6CC,EAD7C,kBAC0DM,IAJ/D,uBAEKH,EAFL,EAEHF,KAAQE,QAFL,kBAOEA,GAPF,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/getMovieInfo.js","services/getMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  border-top: 1px solid grey;\n  border-bottom: 1px solid grey;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  gap: 15px;\n`;\nexport const ActorCard = styled.li`\n  /* display: flex;\n  flex-direction: column;\n  justify-content: space-between; */\n  width: 200px;\n  box-shadow: 2px 2px 2px 2px gray;\n  border-radius: 4px;\n`;\n\nexport const ActorImg = styled.img`\n  width: 200px;\n  height: 270px;\n  border-radius: 4px;\n`;\n\nexport const ActorInfoThumb = styled.div`\n  padding: 10px;\n`;\n\nexport const ActorInfo = styled.p`\n  font-size: 14px;\n`;\n\nexport const Character = styled.span`\n  font-weight: 700;\n`;\n","import { useParams, Outlet } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { getActors } from 'services/getMovieInfo';\nimport { imgURL } from 'services/getMovies';\nimport {\n  CastList,\n  ActorCard,\n  ActorImg,\n  ActorInfoThumb,\n  ActorInfo,\n  Character,\n} from './Cast.styled';\nimport notFoundImg from '../../no-img.png';\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n\n  useEffect(() => {\n    getActors(`${movieId}`).then(cast => {\n      setActors([...cast]);\n      // eslint-disable-next-line\n    });\n\n    return () => {\n      setActors([]);\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n      {actors.length > 0 ? (\n        <CastList>\n          {actors\n            .filter(({ character }) => character)\n            .map(({ original_name, cast_id, character, profile_path }) => (\n              <ActorCard key={cast_id}>\n                {profile_path ? (\n                  <ActorImg\n                    src={`${imgURL}${profile_path}`}\n                    alt={original_name}\n                  />\n                ) : (\n                  <ActorImg src={notFoundImg} alt={original_name} />\n                )}\n                <ActorInfoThumb>\n                  <ActorInfo>\n                    {original_name} as\n                    <Character> {character}</Character>\n                  </ActorInfo>\n                </ActorInfoThumb>\n              </ActorCard>\n            ))}\n        </CastList>\n      ) : (\n        <p>Sorry, there is no info about actors.</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { KEY } from './getMovies';\n\nexport async function getMovieById(movieId) {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}`\n  );\n\n  return data;\n}\n\nexport async function getMovieReviews(movieId) {\n  const {\n    data: { results },\n  } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n\n  return results;\n}\n\nexport async function getActors(movieId) {\n  const {\n    data: { cast },\n  } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}`\n  );\n\n  return cast;\n}\n","import axios from 'axios';\nexport const KEY = '008f0f784afae380e7e38ed25ea842e9';\nexport const imgURL = 'https://image.tmdb.org/t/p/w300/';\nexport async function getTrendingMovies() {\n  const {\n    data: { results },\n  } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}`\n  );\n\n  return results;\n}\n\nexport async function searchMovies(query) {\n  const {\n    data: { results },\n  } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return results;\n}\n"],"names":["CastList","styled","ActorCard","ActorImg","ActorInfoThumb","ActorInfo","Character","movieId","useParams","useState","actors","setActors","useEffect","getActors","then","cast","Suspense","fallback","length","filter","character","map","original_name","cast_id","profile_path","src","imgURL","alt","notFoundImg","getMovieById","axios","KEY","data","getMovieReviews","results","getTrendingMovies","searchMovies","query"],"sourceRoot":""}